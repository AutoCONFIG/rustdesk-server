#!/bin/sh /etc/rc.common
. /usr/share/libubox/jshn.sh

USE_PROCD=1
START=95
STOP=5

CONF="rustdesk-server"

# 合并连续的端口为范围
combine_ports() {
    local ports=""
    
    # 将范围展开为实际的端口列表
    for item in "$@"; do
        if echo "$item" | grep -qE '^[0-9]+-[0-9]+$'; then
            local start end
            start=$(echo "$item" | cut -d'-' -f1)
            end=$(echo "$item" | cut -d'-' -f2)
            for port in $(seq "$start" "$end"); do
                ports="$ports $port"
            done
        else
            ports="$ports $item"
        fi
    done

    # 排序并移除重复，使用临时文件来处理
    ports=$(echo "$ports" | tr ' ' '\n' | sort -n | uniq | tr '\n' ' ')

    # 合并连续端口为范围
    local result=""
    local start=""
    local end=""

    for port in $ports; do
        if [ -z "$start" ]; then
            start=$port
            end=$port
        elif [ $((end + 1)) -eq "$port" ]; then
            end=$port
        else
            if [ "$start" -eq "$end" ]; then
                result="$result$start "
            else
                result="$result$start-$end "
            fi
            start=$port
            end=$port
        fi
    done

    # 处理最后一段范围
    if [ "$start" -eq "$end" ]; then
        result="$result$start"
    else
        result="$result$start-$end"
    fi

    echo "$result"
}

# Retrieve HBBS ports
get_hbbs_ports() {
    local hbbs_ports=""
    if [ "$1" -eq "0" ]; then
        hbbs_ports="$(( $2 - 1 ))-$2"
    else
        hbbs_ports="$(( $2 - 1 ))-$2 $(( $2 + 2 ))"
    fi
    echo "$hbbs_ports"
}

# Retrieve HBBR ports
get_hbbr_ports() {
    local hbbr_ports=""
    if [ "$1" -eq "0" ]; then
        hbbr_ports="$2"
    else
        hbbr_ports="$2 $(( $2 + 2 ))"
    fi
    echo "$hbbr_ports"
}

load_config() {
	local HBBS_TCP_PORTS=""
    local HBBR_TCP_PORTS=""
	TCP_PORTS=""
	UDP_PORTS=""

	config_load "$CONF"

	config_get_bool _enabled "global" "enabled"
	config_get _workdir "global" "workdir"
	config_get_bool _auto_fw "global" "auto_fw"
	config_get_bool _web_client "global" "web_client"
	config_get_bool _hbbr_enabled "hbbr" "enabled"
	config_get _hbbr_port "hbbr" "port"
	config_get_bool _hbbs_enabled "hbbs" "enabled"
	config_get _hbbs_port "hbbs" "port"

    [ "$_hbbs_enabled" -eq "0" ] || {
		HBBS_TCP_PORTS=$(get_hbbs_ports "$_web_client" "$_hbbs_port")
		UDP_PORTS="$_hbbs_port"  # 21116
	}
    [ "$_hbbr_enabled" -eq "0" ] || HBBR_TCP_PORTS=$(get_hbbr_ports "$_web_client" "$_hbbr_port")

	printf "HBBS_TCP_PORTS: %s\nHBBR_TCP_PORTS: %s\n" "$HBBS_TCP_PORTS" "$HBBR_TCP_PORTS"
	TCP_PORTS=$(combine_ports $HBBS_TCP_PORTS $HBBR_TCP_PORTS)
	printf "TCP Ports: %s\nUDP Ports: %s\n" "$TCP_PORTS" "$UDP_PORTS"
}

check_firewall_rule_exists() {
	local rule_name=$1
	local port_range=$2
	local cnt=0
	while [ -n "$(uci -q get firewall.@rule[$cnt].name)" ]; do
		local name=$(uci -q get firewall.@rule[$cnt].name)
		local port=$(uci -q get firewall.@rule[$cnt].dest_port)
		printf "Checking rule %s with port %s\n" "$name" "$port"
		if [ "$name" = "$rule_name" ] && [ "$port" = "$port_range" ]; then
			printf "Rule exists: %s\n" "$rule_name"
			return 0
		fi
		cnt=$((cnt + 1))
	done
	return 1
}

setup_firewall() {
	procd_open_data
	json_add_array firewall
	if (! [ "$_hbbs_enabled" -eq "0" ] || ! [ "$_hbbr_enabled" -eq "0" ]) && ! check_firewall_rule_exists "rustdesk-server-tcp" "$TCP_PORTS"; then
		printf "Adding firewall rule for TCP ports: %s\n" "$TCP_PORTS"
		json_add_object ""
		json_add_string type rule
		json_add_string name "Allow-rustdesk-server-tcp"
		json_add_string proto tcp
		json_add_string src "wan"
		json_add_string dest_port "$TCP_PORTS"
		json_add_string target ACCEPT
		json_close_object
	fi

	if ! [ "$_hbbs_enabled" -eq "0" ] && ! check_firewall_rule_exists "rustdesk-server-udp" "$UDP_PORTS"; then
		printf "Adding firewall rule for UDP ports: %s\n" "$UDP_PORTS"
		json_add_object ""
		json_add_string type rule
		json_add_string name "Allow-rustdesk-server-udp"
		json_add_string proto udp
		json_add_string src "wan"
		json_add_string dest_port "$UDP_PORTS"
		json_add_string target ACCEPT
		json_close_object
	fi
	json_close_array
	json_dump # 调试json输出
	procd_close_data
}

start_service() {
	printf "Starting service...\n"
	load_config

	[ "$_enabled" -eq "0" ] || { [ "$_hbbr_enabled" -eq "0" ] && [ "$_hbbs_enabled" -eq "0" ] && return 1; }
	[ "$_auto_fw" -eq "0" ] || setup_firewall

	if ! mkdir -p "$_workdir"; then
		printf "Failed to create working directory: %s\n" "$_workdir"
		return 1
	fi

	[ "$_hbbs_enabled" -eq "0" ] || {
		procd_open_instance "hbbs.server"
		procd_set_param command sh -c "cd $_workdir && /usr/bin/hbbs -p "${_hbbs_port}""
		procd_set_param respawn
		procd_close_instance
	}

	[ "$_hbbr_enabled" -eq "0" ] || {
		procd_open_instance "hbbr.relay"
		procd_set_param command sh -c "cd $_workdir && /usr/bin/hbbr -p "${_hbbr_port}""
		procd_set_param respawn
		procd_close_instance
	}
	
}

service_started() {
	procd_set_config_changed firewall
}

service_stopped() {
	procd_set_config_changed firewall
}

service_triggers() {
	procd_add_reload_trigger "$CONF"
}
